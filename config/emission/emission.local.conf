server {
  listen              80;
  server_name         emission.local;

  access_log          /var/www/emission/app/logs/emission.nginx.access.log;
  error_log           /var/www/emission/app/logs/emission.nginx.error.log;

  gzip on;
  gzip_min_length 1000;
  gzip_types text/plain text/xml application/xml text/css application/x-javascript;

  client_max_body_size  256m;
  client_header_timeout 600;
  client_body_timeout   600;
  send_timeout          600;
  keepalive_timeout     1200;
  postpone_output       1460; #Wait for full packet before sending the inital response
  # (Optional) Enable Asyncronous I/O, serve content using directio for files bigger than 256K and use a single output buffer of 512K
#  aio on;
#  directio 256;
#  output_buffers 1 512K;

  set $thttps $https;
  if ($http_x_forwarded_proto = https) {
    set $thttps on;
  }

  if ($http_x_forwarded_proto = HTTPS) {
    set $thttps on;
  }

  root        /var/www/emission/web;

  location / {
        index app.php;
        try_files $uri @rewriteapp;
  }

  location @rewriteapp {
        rewrite ^(.*)$ /app.php/$1 last;
  }

  satisfy              any;

  location ~ ^/(app|app_dev|config)\.php(/|$) {
    fastcgi_pass    unix:/var/run/php5-fpm.sock;
    fastcgi_index   index.php;
    include         fastcgi_params;
    fastcgi_connect_timeout 1200;
    fastcgi_send_timeout    1200;
    fastcgi_read_timeout    1200;
    fastcgi_param   PHP_VALUE       "error_log=/var/www/emission/app/logs/emission.php-fpm.error.log";
    fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_param   APPLICATION_ENV development;
    fastcgi_param   HTTPS           $thttps;
    fastcgi_param   REMOTE_PORT     $remote_port;
    fastcgi_param   SERVER_ADDR     $server_addr;
    fastcgi_param   SERVER_PORT     $server_port;
    fastcgi_param   REMOTE_ADDR     $http_x_forwarded_for;
  }

  error_page  403 /403.html;
  error_page  404 /404.html;
  error_page  500 502 503 504 /50x.html;
  location /403.html {
    root      /var/www/public/error/;
  }
  location /404.html {
    root      /var/www/public/error/;
  }
  location /50x.html {
    root      /var/www/public/error/;
  }
  if ($request_uri ~* ^(/)+healthcheck.* ) {
      set $denyreq on;
  }
   
  if ($http_x_forwarded_for = '' ) {
      set $denyreq off;
  }
  if ($denyreq = on) {
      return 403;
  }
}
